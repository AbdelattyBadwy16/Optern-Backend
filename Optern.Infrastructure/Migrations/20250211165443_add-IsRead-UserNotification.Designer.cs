// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Optern.Infrastructure.Data;

#nullable disable

namespace Optern.Infrastructure.Migrations
{
    [DbContext(typeof(OpternDbContext))]
    [Migration("20250211165443_add-IsRead-UserNotification")]
    partial class addIsReadUserNotification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("LastLogIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int?>("PositionId")
                        .HasColumnType("integer");

                    b.Property<string>("ProfilePicture")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_ApplicationUsers_Email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PositionId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.BookMarkedTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("BookMarkedTasks", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.CV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CV", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoomId")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.ToTable("Chats", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.ChatParticipants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("ChatId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_ChatParticipants_ChatId_UserId");

                    b.ToTable("ChatParticipants", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CommentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.CommentReacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<string>("ReactType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("CommentId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_CommentReact_CommentId_UserId");

                    b.ToTable("CommentReacts", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("EndYear")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("StartYear")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Education_UserId");

                    b.ToTable("Educations", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCurrentlyWork")
                        .HasColumnType("boolean");

                    b.Property<string>("JobDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_Experience_UserId");

                    b.ToTable("Experiences", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.FavoritePosts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId", "PostId")
                        .IsUnique()
                        .HasDatabaseName("IX_FavoritePosts_UserId_PostId");

                    b.ToTable("FavoritePosts", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("ChatId", "SentDate", "SenderId")
                        .HasDatabaseName("IX_Messages_ChatId_SentDate_SenderId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("RoomId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.PTPFeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IntervieweePerformance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InterviewerPerformance")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PTPInterviewId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PTPInterviewId")
                        .HasDatabaseName("IX_PTPFeedBack_PTPInterviewId");

                    b.ToTable("PTPFeedBacks", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.PTPInterview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("PTPInterviews", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.PTPQuestionInterview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PTPInterviewId")
                        .HasColumnType("integer");

                    b.Property<int>("PTPQuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PTPInterviewId");

                    b.HasIndex("PTPQuestionId")
                        .HasDatabaseName("IX_PTPQuestionInterview_PTPQuestionId");

                    b.ToTable("PTPQuestionInterviews", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.PTPQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("PTPQuestions", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.PTPUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PTPIId")
                        .HasColumnType("integer");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("PTPIId");

                    b.HasIndex("UserID")
                        .HasDatabaseName("IX_PTPUsers_UserID");

                    b.ToTable("PTPUsers", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Positions", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int>("ContentType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EditedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .HasDatabaseName("IX_Posts_Title");

                    b.HasIndex("CreatorId", "CreatedDate")
                        .HasDatabaseName("IX_Posts_Creator_CreatedDate");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.PostTags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("PostId", "TagId")
                        .IsUnique()
                        .HasDatabaseName("IX_PostTags_PostId_TagId");

                    b.ToTable("PostTags", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Reacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReactDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ReactType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.HasIndex("PostId")
                        .HasDatabaseName("IX_Reacts_PostId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Reacts_UserId");

                    b.ToTable("Reacts", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Repository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoomId")
                        .IsUnique();

                    b.ToTable("Repository", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.RepositoryFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RepositoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.ToTable("RepositoryFile", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Room", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CoverPicture")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RoomType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("IX_Rooms_CreatorId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Rooms_Name");

                    b.ToTable("Rooms", null, t =>
                        {
                            t.HasCheckConstraint("CK_Room_Capacity", "\"Capacity\" >= 1");
                        });
                });

            modelBuilder.Entity("Optern.Domain.Entities.RoomPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomPositions", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.RoomSkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("RoomId", "SkillId")
                        .IsUnique()
                        .HasDatabaseName("IX_RoomSkills_Room_Skill");

                    b.ToTable("RoomSkills", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.RoomTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TrackId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("TrackId");

                    b.ToTable("RoomTracks", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Skills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Skills_Name");

                    b.ToTable("Skills", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Sprint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("WorkSpaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkSpaceId");

                    b.ToTable("Sprints", null, t =>
                        {
                            t.HasCheckConstraint("CK_Sprint_StartEndDate", "[StartDate] < [EndDate]");
                        });
                });

            modelBuilder.Entity("Optern.Domain.Entities.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Tags_Name");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("DueDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SprintId")
                        .HasColumnType("integer");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("SprintId")
                        .HasDatabaseName("IX_Task_SprintId");

                    b.ToTable("Tasks", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.TaskActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("CouldDelete")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatorId")
                        .HasColumnType("text");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskActivity", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.ToTable("Tracks", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.UserNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.UserRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("RoomId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("UX_UserRoom_Room_User");

                    b.ToTable("UserRooms", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.UserSkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.HasIndex("UserId", "SkillId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserSkills_User_Skill");

                    b.ToTable("UserSkills", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.UserTasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Assignedat")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AttachmentUrls")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Attachmentdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId", "TaskId")
                        .IsUnique()
                        .HasDatabaseName("UX_UserTasks_User_Task");

                    b.ToTable("UserTasks", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.VFeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PerformanceScore")
                        .HasColumnType("integer")
                        .HasComment("Performance score must be between 0 and 100 inclusive.");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Strengths")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("VInterviewID")
                        .HasColumnType("integer");

                    b.Property<int>("VirtualInterviewId")
                        .HasColumnType("integer");

                    b.Property<string>("Weaknesses")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("VirtualInterviewId");

                    b.ToTable("VFeedBack", null, t =>
                        {
                            t.HasCheckConstraint("CK_VFeedBack_PerformanceScore", "\"PerformanceScore\" BETWEEN 0 AND 100");
                        });
                });

            modelBuilder.Entity("Optern.Domain.Entities.VInterview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("timestamp")
                        .HasComment("ScheduledTime must be in the future and is required.");

                    b.Property<string>("SpeechAnalysisResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_VInterview_UserId");

                    b.ToTable("VInterview", null, t =>
                        {
                            t.HasCheckConstraint("CK_VInterviews_ScheduledTime_Future", "\"ScheduledTime\" > NOW()");
                        });
                });

            modelBuilder.Entity("Optern.Domain.Entities.VInterviewQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("VInterviewID")
                        .HasColumnType("integer");

                    b.Property<int>("VQuestionID")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VInterviewID");

                    b.HasIndex("VQuestionID");

                    b.ToTable("VInterviewQuestions", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.VQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Answer")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("Content of the question with a maximum of 500 characters.");

                    b.HasKey("Id");

                    b.ToTable("VQuestions", (string)null);
                });

            modelBuilder.Entity("Optern.Domain.Entities.WorkSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("RoomId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("IX_WorkSpace_RoomId");

                    b.ToTable("WorkSpaces", null, t =>
                        {
                            t.HasCheckConstraint("CK_WorkSpaces_CreatedDate_Future", "CreatedDate > NOW()");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Optern.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Optern.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Optern.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Optern.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("Optern.Domain.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("Position");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Optern.Domain.Entities.BookMarkedTask", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Task", "Task")
                        .WithMany("BookMarkedTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("BookMarkedTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Optern.Domain.Entities.CV", b =>
                {
                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("CVs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Chat", b =>
                {
                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "Creator")
                        .WithMany("CreatedChats")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.Room", "Room")
                        .WithOne("Chat")
                        .HasForeignKey("Optern.Domain.Entities.Chat", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Creator");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Optern.Domain.Entities.ChatParticipants", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Chat", "Chat")
                        .WithMany("ChatParticipants")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("JoinedChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Comment", "comment")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Optern.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");

                    b.Navigation("comment");
                });

            modelBuilder.Entity("Optern.Domain.Entities.CommentReacts", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Comment", "Comment")
                        .WithMany("CommentReacts")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("CommentReacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Education", b =>
                {
                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Educations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Experience", b =>
                {
                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Experiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Optern.Domain.Entities.FavoritePosts", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Post", "Post")
                        .WithMany("FavoritePosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("FavoritePosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Message", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Notifications", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Room", "Room")
                        .WithMany("Notifications")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Optern.Domain.Entities.PTPFeedBack", b =>
                {
                    b.HasOne("Optern.Domain.Entities.PTPInterview", "PTPInterview")
                        .WithMany("PTPFeedBacks")
                        .HasForeignKey("PTPInterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PTPInterview");
                });

            modelBuilder.Entity("Optern.Domain.Entities.PTPQuestionInterview", b =>
                {
                    b.HasOne("Optern.Domain.Entities.PTPInterview", "PTPInterview")
                        .WithMany("PTPQuestionInterviews")
                        .HasForeignKey("PTPInterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.PTPQuestions", "PTPQuestion")
                        .WithMany("PTPQuestionInterviews")
                        .HasForeignKey("PTPQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PTPInterview");

                    b.Navigation("PTPQuestion");
                });

            modelBuilder.Entity("Optern.Domain.Entities.PTPUsers", b =>
                {
                    b.HasOne("Optern.Domain.Entities.PTPInterview", "PeerToPeerInterview")
                        .WithMany("PeerToPeerInterviewUsers")
                        .HasForeignKey("PTPIId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("PeerToPeerInterviewUsers")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PeerToPeerInterview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Post", b =>
                {
                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "Creator")
                        .WithMany("CreatedPosts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Optern.Domain.Entities.PostTags", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.Tags", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Reacts", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Post", "Post")
                        .WithMany("Reacts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Reacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Repository", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Room", "Room")
                        .WithOne("Repository")
                        .HasForeignKey("Optern.Domain.Entities.Repository", "RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Optern.Domain.Entities.RepositoryFile", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Repository", "Repository")
                        .WithMany("RepositoryFiles")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Room", b =>
                {
                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "Creator")
                        .WithMany("Rooms")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Optern.Domain.Entities.RoomPosition", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Position", "Position")
                        .WithMany("RoomPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.Room", "Room")
                        .WithMany("RoomPositions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Optern.Domain.Entities.RoomSkills", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Room", "Room")
                        .WithMany("RoomSkills")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.Skills", "Skill")
                        .WithMany("RoomSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Optern.Domain.Entities.RoomTrack", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Room", "Room")
                        .WithMany("RoomTracks")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.Track", "Track")
                        .WithMany("RoomTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Sprint", b =>
                {
                    b.HasOne("Optern.Domain.Entities.WorkSpace", "WorkSpace")
                        .WithMany("Sprints")
                        .HasForeignKey("WorkSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkSpace");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Task", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Sprint", "Sprint")
                        .WithMany("Tasks")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sprint");
                });

            modelBuilder.Entity("Optern.Domain.Entities.TaskActivity", b =>
                {
                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "Creator")
                        .WithMany("TaskActivities")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Optern.Domain.Entities.Task", "Task")
                        .WithMany("Activities")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Optern.Domain.Entities.UserNotification", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Notifications", "Notifications")
                        .WithMany("UserNotification")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("UserNotification")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Optern.Domain.Entities.UserRoom", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Room", "Room")
                        .WithMany("UserRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("UserRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Optern.Domain.Entities.UserSkills", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Skills", "Skill")
                        .WithMany("UserSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Optern.Domain.Entities.UserTasks", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Task", "Task")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("AssignedTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Optern.Domain.Entities.VFeedBack", b =>
                {
                    b.HasOne("Optern.Domain.Entities.VInterview", "VirtualInterview")
                        .WithMany()
                        .HasForeignKey("VirtualInterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VirtualInterview");
                });

            modelBuilder.Entity("Optern.Domain.Entities.VInterview", b =>
                {
                    b.HasOne("Optern.Domain.Entities.VFeedBack", "VirtualFeedBack")
                        .WithOne()
                        .HasForeignKey("Optern.Domain.Entities.VInterview", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.ApplicationUser", "User")
                        .WithMany("JoinedVirtualInterviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VirtualFeedBack");
                });

            modelBuilder.Entity("Optern.Domain.Entities.VInterviewQuestions", b =>
                {
                    b.HasOne("Optern.Domain.Entities.VInterview", "VInterview")
                        .WithMany("VInterviewQuestions")
                        .HasForeignKey("VInterviewID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Optern.Domain.Entities.VQuestions", "VQuestions")
                        .WithMany("VInterviewQuestions")
                        .HasForeignKey("VQuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VInterview");

                    b.Navigation("VQuestions");
                });

            modelBuilder.Entity("Optern.Domain.Entities.WorkSpace", b =>
                {
                    b.HasOne("Optern.Domain.Entities.Room", "Room")
                        .WithMany("WorkSpaces")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Optern.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("AssignedTasks");

                    b.Navigation("BookMarkedTasks");

                    b.Navigation("CVs");

                    b.Navigation("CommentReacts");

                    b.Navigation("Comments");

                    b.Navigation("CreatedChats");

                    b.Navigation("CreatedPosts");

                    b.Navigation("Educations");

                    b.Navigation("Experiences");

                    b.Navigation("FavoritePosts");

                    b.Navigation("JoinedChats");

                    b.Navigation("JoinedVirtualInterviews");

                    b.Navigation("Messages");

                    b.Navigation("PeerToPeerInterviewUsers");

                    b.Navigation("Reacts");

                    b.Navigation("Rooms");

                    b.Navigation("TaskActivities");

                    b.Navigation("UserNotification");

                    b.Navigation("UserRooms");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Chat", b =>
                {
                    b.Navigation("ChatParticipants");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Comment", b =>
                {
                    b.Navigation("CommentReacts");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Notifications", b =>
                {
                    b.Navigation("UserNotification");
                });

            modelBuilder.Entity("Optern.Domain.Entities.PTPInterview", b =>
                {
                    b.Navigation("PTPFeedBacks");

                    b.Navigation("PTPQuestionInterviews");

                    b.Navigation("PeerToPeerInterviewUsers");
                });

            modelBuilder.Entity("Optern.Domain.Entities.PTPQuestions", b =>
                {
                    b.Navigation("PTPQuestionInterviews");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Position", b =>
                {
                    b.Navigation("RoomPositions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavoritePosts");

                    b.Navigation("PostTags");

                    b.Navigation("Reacts");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Repository", b =>
                {
                    b.Navigation("RepositoryFiles");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Room", b =>
                {
                    b.Navigation("Chat")
                        .IsRequired();

                    b.Navigation("Notifications");

                    b.Navigation("Repository")
                        .IsRequired();

                    b.Navigation("RoomPositions");

                    b.Navigation("RoomSkills");

                    b.Navigation("RoomTracks");

                    b.Navigation("UserRooms");

                    b.Navigation("WorkSpaces");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Skills", b =>
                {
                    b.Navigation("RoomSkills");

                    b.Navigation("UserSkills");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Sprint", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Tags", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Task", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("AssignedTasks");

                    b.Navigation("BookMarkedTasks");
                });

            modelBuilder.Entity("Optern.Domain.Entities.Track", b =>
                {
                    b.Navigation("RoomTracks");
                });

            modelBuilder.Entity("Optern.Domain.Entities.VInterview", b =>
                {
                    b.Navigation("VInterviewQuestions");
                });

            modelBuilder.Entity("Optern.Domain.Entities.VQuestions", b =>
                {
                    b.Navigation("VInterviewQuestions");
                });

            modelBuilder.Entity("Optern.Domain.Entities.WorkSpace", b =>
                {
                    b.Navigation("Sprints");
                });
#pragma warning restore 612, 618
        }
    }
}
